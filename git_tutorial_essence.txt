FROM=Git Essential Training with Kevin Skoglund Lynda
- commit -am"msg"  = add + commit (modified - new and deleted files dont work like this) on the same time
 ###HELP??? from http://www.lynda.com/Git-tutorials/Comparing-commits/100222/111304-4.html 1min = diff between wd and sd?
- with git diff = diffs between repo and working (and/or staging dir if in same file)
- with git diff --staged = diffs between repo  and staging dir 
FUCK see git help diff
- git diff COMMIT = diff between the wd and COMMIT
- git diff COMMIT FILE = diff between the wd and COMMIT only about that FILE
- git diff COMMIT..COMMIT = diff between 2 COMMITs
- git diff --stat --summmary COMMIT..COMMIT = shows list of the files with details
- git diff --ignore-space-change = git diff -b = ignors white-spaces !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- git diff --ignore-all-space = git diff -w = ignors all spaces !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
###HELP
- to delte = 1)delete and git rm FILE plus commit
			2) git rm FILE will delete and adedd to stage 
- how to deal with the rename - 1)just rename and add+delete later + commit later... or 
								2)git mv FILE FILE2

- git checkout -- FILE (-- means stay on the current branch) to revert wdir from HEAD repo
- git checkout 12341234 -- FILE () to revert wdir from repo any previous commit
- git reset HEAD FILE  to revert stagingdir from repo
- undoing commits
- git diff color-words
- git commit --amend -m"msg" - only last commit ist editable via

- git revert 12341234 - revert the changes and commits it


- reset = where the head pointer should be moved - soft, mixed, hard

 - git ls-tree HEAD~11 = will show you the tree(files) of the ancestor
 - git log --oneline 150d68d.. .\first_file.txt = show me all what happend to FILE since COMMIT
 - git log -p 150d68d.. .\first_file.txt = -p shows the diff of the changes
 - git log --online --graph --all --decorate= !!!!!!!!!!!!!!!!
 - git show COMMIT= gis you the info + diff

- git = compare two different commits.

-Using reset to undo commits!!!!!!!!!lynda


Using .gitignore files
gnoring tracked files


BRANCHing!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- when you create new-branch the HEAD still points to the current-branch,  only once we make new commits to the new-branch then HEAD moves to a new commit(new-branch)
-git branch = show all branches
-git branch BRANCH= create new-BRANCH
-git checkout BRANCH=switch to BRANCH
-git checkout -b BRANCH= create and switch to BRANCHat the same time

- your working directory must be clean in order to switch branches. Actually, mostly clean(new file allowed). if it's not clean, then Git won't let you do the switch. 

-git diff branch..branch2	=compare branches  (--colorwords)

- git branch --merged = we can find out, whether one branch completely contains another branch or not. That will show us all branches that are completely included in this branch. So in this case we're on the shorten_title branch, all of the commits that are in new_feature are also in shorten_title, all of the commits that are in master are also in shorten_title. so  we can actually delete new feature  and shorten_title wouldn't be affected. 

-git branch -m OLDNAME NEWNAME =rename branches
-git branch -d NAME = delete branch (u cant be on this branch, u havto be on some other)
-git branch -D NAME = delete branch even if has not commited stages
- You check out the receiving branch, then you say git merge and then the target branch or the sending branch and that's it.

-git merge --no-ff BRANCH =  no-ff option forces Git to create a merge commit = don't do a fast-forward, make a new commit with the commit message anyway
-git merge --ff-only BRANCH =  ff-only says do the merge only if you can do a fast-forward otherweise just abort.
- if you have a conflict = To abort the merge, while we're in this state, all we have to do is say, git merge --abort. 
 git log --graph --oneline --all --decorate

-git mergetool
http://kdiff3.sourceforge.net/
or
http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools

git stash save "some message" save not added change for later
http://www.lynda.com/Git-tutorials/Saving-changes-stash/100222/111322-4.html
git stash pop(removes) or apply(leaves stash)

###REMOTE###
origin/master and push & fetch(brings changes in from remote to origin/master but not in master)
POINTERS=http://www.lynda.com/Git-tutorials/Using-local-remote-repositories/100222/111327-4.html 4min

- git remote =see what remotes we have

git remote add origin https://github.com/nhanjalic/git1.git
git push -u origin master = -u means track it!!! so next time u can say just "git push" and it will do "git push origin master" BUT I GET ERROR????

git branch -r  = only remote branches 
git branch -a  = all branches 

git clone https://github.com/nhanjalic/git1.git = get it from git 

git remote rm origin = remowe some/one remote


- a fetch is what synchronizes origin/ master with whatever is on the remote repository so:
-git fetch origin
-git merge origin/master

 -git pull = is equal to git fetch+git merge.

###FROM ProGit#########################

git diff = What have you changed but not yet staged - aka. git diff by itself doesn’t show all changes made since
your last commit — only changes that are still unstaged.
git diff --staged = What have you staged but not commited.
- git log --pretty=format:"%h - %an, %ar : %s"

git tag v0.1 = add lightweight tag
git tag -d v0.1 = remove


###PROZESS###
1)fetch everything from remote-repo to origin/master
2)merge anything if needed in local-master
3)make a local-branch
4)do the changes
5)fetch everything from remote-repo to origin/master and merge in local-master(in case someone else commited something to remote-repo)
6)merge local-branch to local-master
7)fetch everything from remote-repo to origin/master and merge to local-master (just check again)
8)push to remote-repo

Rulles=
fetch before you work. 
fetch before you push.

